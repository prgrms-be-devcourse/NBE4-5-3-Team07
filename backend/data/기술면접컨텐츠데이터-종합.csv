번호,상위질문번호,카테고리,키워드,질문,답변,상위질문사용가능
1,NULL,Database,sequence,오라클 시퀀스(Oracle Sequence) 는 무엇인가요?,UNIQUE한 값을 생성해주는 오라클 객체. 시퀀스를 생성하면 PK와 같이 순차적으로 증가하는 컬럼을 자동 생성할 수 있다.,TRUE
2,1,Database,sequence,오라클 시퀀스를 생성할 때 START WITH와 INCREMENT BY 옵션은 각각 어떤 역할을 하나요?,"START WITH는 시퀀스가 처음으로 생성될 때 시작할 숫자를 지정합니다.
INCREMENT BY는 시퀀스가 다음 값을 생성할 때 얼마만큼 증가(또는 감소)할지를 정합니다.",FALSE
3,2,Database,sequence,시퀀스로 생성한 값이 너무 커져서 특정 범위를 초과했을 때는 어떻게 처리해야 하나요?,"시퀀스를 생성할 때 MAXVALUE 또는 CYCLE 옵션 등을 설정할 수 있습니다.
MAXVALUE를 넘으면 더 이상 값을 생성하지 못하도록 막거나(NOCYCLE)
CYCLE을 설정하여 최대값에 도달하면 다시 최소값으로 되돌려 재사용하게 할 수도 있습니다.",FALSE
4,NULL,Database,DBMS,DBMS란?,데이터베이스 관리 시스템. 다수의 사용자가 데이터베이스 내의 데이터를 접근할 수 있도록 설계된 시스템,TRUE
5,4,Database,DBMS,DBMS가 없을 때 발생할 수 있는 문제점은 무엇인가요?,"파일 시스템으로만 데이터를 관리할 경우, 데이터 중복과 일관성 문제 발생
데이터를 효율적으로 검색, 보안, 동시성 제어 등을 처리하기 어려움
규모가 커질수록 유지보수 비용이 급격히 증가",FALSE
6,5,Database,DBMS,DBMS를 도입하면 보안 측면에서 어떤 이점이 있을까요?,"사용자별로 접근 권한을 세분화하여 설정할 수 있어, 특정 테이블 또는 컬럼 단위의 접근 제한 가능
트랜잭션 로그, 감사 추적(audit) 등을 통해 누가 언제 어떤 데이터를 수정했는지 기록 가능
암호화, 백업 등 보안 및 안정성에 필요한 다양한 기능을 제공",FALSE
7,NULL,Database,DBMS,DBMS의 기능은?,"정의 기능(DDL) : CREATE, ALTER, DROP, RENAME
조작 기능(DML) : SELECT, INSERT, UPDATE, DELETE
제어 기능(DCL) : GRANT, REVOKE",TRUE
8,7,Database,DBMS,DDL에서 사용하는 TRUNCATE 명령어와 DELETE 명령어는 어떤 차이가 있나요?,"TRUNCATE: 테이블의 모든 데이터를 빠르게 삭제하고, 테이블 구조는 남겨둡니다. (롤백이 불가능)
DELETE: DML 명령어로서, 조건에 따라 레코드를 선택 삭제할 수 있고, 트랜잭션 롤백도 가능합니다.",FALSE
9,8,Database,DBMS,DCL을 활용해 여러 사용자에게 권한을 부여할 때 주의해야 할 점은 무엇인가요?,"권한을 과도하게 부여하면 보안 문제가 생길 수 있으므로, 최소 권한 원칙(Principle of Least Privilege)을 지켜야 합니다.
권한을 철회할 때는 종속된 객체나 다른 사용자 권한까지 확인해야 예기치 못한 오류를 방지할 수 있습니다.",FALSE
10,NULL,Database,DBMS,UML이란?,프로그램 설계를 표현하기 위해 사용하는 그림으로 된 표기법. 복잡한 시스템을 이해하고 의사소통하기 위해 만들어짐,TRUE
11,10,Database,DBMS,UML 다이어그램 중에서 클래스 다이어그램과 시퀀스 다이어그램은 각각 어떤 상황에서 주로 사용되나요?,"클래스 다이어그램: 시스템의 구조, 클래스 간의 속성과 관계를 표현할 때 사용
시퀀스 다이어그램: 객체들 간의 상호 작용, 메서드 호출 순서, 시간적 흐름을 나타낼 때 사용",FALSE
12,11,Database,DBMS,UML 다이어그램을 그릴 때 가장 많이 실수하는 부분은 무엇인가요?,"다이어그램 종류별로 표현 요소가 다른데, 이를 혼동하여 잘못된 기호를 사용하는 경우
너무 세부적인 것까지 모두 표현하려다 다이어그램이 복잡해져 가독성이 떨어지는 경우
실제 코드 구조와 정합성이 맞지 않는 경우가 발생할 수 있으므로, 다이어그램과 구현을 함께 관리하는 것이 중요",FALSE
13,NULL,Database,view,DB에서 View는 무엇인가? 가상 테이블이란?,"허용된 데이터를 제한적으로 보여주기 위한 것. 하나 이상의 테이블에서 유도된 가상 테이블이며, 사용자가 view에 접근했을 때 해당 데이터를 원본에서 가져온다.",TRUE
14,13,Database,view,뷰(View)를 사용할 때 성능 이슈가 발생할 수 있는 상황은 언제인가요?,"복잡한 조인이나 서브쿼리를 포함한 뷰를 자주 호출할 경우, 실시간으로 원본 테이블에서 데이터를 조회하기 때문에 성능 저하가 발생할 수 있습니다.
뷰를 중첩해서 사용하는 경우에도 불필요한 연산이 누적될 수 있습니다.",FALSE
15,14,Database,view,"뷰를 사용하면 DML 작업(INSERT, UPDATE, DELETE)이 제한될 수 있는데, 이를 허용하려면 어떻게 해야 하나요?","뷰를 생성할 때 WITH CHECK OPTION 등을 사용하고, 기본키나 필요한 컬럼이 모두 포함된 뷰라면 일부 DML 작업이 가능합니다.
다만, 기본적으로 JOIN이나 집계 함수가 포함된 뷰는 DML 제약이 많으므로, 업무 요건에 따라 설계를 주의해야 합니다.",FALSE
16,NULL,Database,정규화,정규화란?,"중복을 최대한 줄여 데이터를 구조화하고, 불필요한 데이터를 제거해 데이터를 논리적으로 저장하는 것. 이상현상이 일어나지 않도록 정규화한다.",TRUE
17,16,Database,정규화,"정규화를 진행하면 조인(Join)이 많아져서 쿼리 성능이 저하될 수 있는데, 이를 어떻게 해결할 수 있을까요?","업무 특성상 자주 조회하는 데이터를 고려해 부분적 비정규화를 적용할 수 있습니다.
인덱스나 적절한 뷰를 사용해 조인 비용을 낮출 수 있습니다.
필요한 경우 캐싱이나 Materialized View 같은 기능도 고려할 수 있습니다.",FALSE
18,17,Database,정규화,정규화 단계 중 3차 정규화(3NF)와 BCNF는 어떤 차이가 있나요?,"3NF: 테이블의 모든 비프라이머리 속성이 기본 키에 완전 함수 종속을 만족해야 함
BCNF(Boyce-Codd Normal Form): 결정자(Determinant)가 모두 후보 키가 되어야 하는 더 강력한 조건을 요구함. 3NF보다 제약이 더 엄격합니다.",FALSE
19,NULL,Database,이상현상,이상현상이란?,"릴레이션에서 일부 속성들의 종속으로 인해 데이터 중복이 발생하는 것 (insert, update, delete 시 문제 발생)",TRUE
20,19,Database,이상현상,이상현상이 발생하는 대표적인 예시는 어떤 것이 있나요?,"삽입 이상: 새로운 데이터를 삽입하려는데, 특정 속성값이 없어 삽입이 불가능한 경우
갱신 이상: 중복된 데이터가 여러 곳에 있어, 일부만 수정하면 데이터가 불일치하게 되는 경우
삭제 이상: 한 정보를 삭제하려고 했는데, 다른 중요한 정보까지 같이 사라지는 경우",FALSE
21,20,Database,이상현상,이상현상을 제거하기 위한 가장 근본적인 해결책은 무엇인가요?,"정규화를 통해 테이블을 올바르게 분해하고, 속성 간 종속성을 최소화하여 중복을 줄이는 것이 핵심입니다.
필요하다면 참조 무결성 제약과 같은 DB 제약 조건을 함께 설정해 데이터의 일관성을 유지합니다.",FALSE
22,NULL,Database,DB설계,데이터베이스를 설계할 때 가장 중요한 것이 무엇이라고 생각하나요?,무결성을 보장해야 합니다.,TRUE
23,22,Database,무결성,무결성을 보장하기 위해 일반적으로 어떤 DB 제약 조건들을 설정하나요?,"PRIMARY KEY 제약: 유일한 식별자 보장
FOREIGN KEY 제약: 참조 무결성 유지
NOT NULL, UNIQUE 등 컬럼 제약: 필수 입력, 중복 불가 등 비즈니스 규칙 반영
CHECK 제약: 특정 범위나 조건을 만족하도록 제한",FALSE
24,23,Database,무결성,무결성을 지키면서도 유연성을 확보하기 위해서는 어떤 부분을 고려해야 할까요?,"지나치게 많은 제약을 걸면 성능 저하나 개발 유연성이 떨어질 수 있으므로, 업무 규칙상 꼭 필요한 제약만 설정하는 균형감이 필요합니다.
일부 규칙은 애플리케이션 레벨에서 검증하도록 설계하여 DB 레벨의 복잡도를 낮추기도 합니다.",FALSE
25,NULL,Database,무결성,데이터베이스 무결성이란?,"테이블에 있는 모든 행들이 유일한 식별자를 가질 것을 요구
외래키 값은 NULL이거나 참조 테이블의 PK값이어야 함
한 컬럼에 대해 NULL 허용 여부와 자료형, 규칙으로 타당한 데이터 값 지정",TRUE
26,25,Database,무결성,무결성을 위한 DB 트랜잭션 특성(ACID) 중 'Isolation'은 왜 중요한가요?,"여러 트랜잭션이 동시에 수행될 때, 각각의 작업이 다른 트랜잭션에 영향을 주지 않도록 독립성을 보장해야 데이터 무결성이 깨지지 않습니다.
Isolation이 제대로 동작하지 않으면 Dirty Read, Non-repeatable Read, Phantom Read 등의 문제가 발생할 수 있습니다.",FALSE
27,26,Database,무결성,무결성을 높이기 위한 DB 락(lock) 전략에는 어떤 것들이 있나요?,"Row-level Lock: 특정 행 단위로 락을 걸어 동시성(Concurrency)을 최대화
Table-level Lock: 테이블 전체에 락을 걸어 충돌은 최소화하나 동시성은 낮음
DBMS마다 Lock Escalation(행 락이 많아지면 테이블 락으로 격상) 등이 자동으로 일어나므로, 상황에 맞는 락 전략이 중요합니다.",FALSE
28,NULL,Database,DBMS,오라클과 MySQL의 차이는?,"오라클 : 대규모 트랜잭션 로드를 처리하고, 성능 최적화를 위해 여러 서버에 대용량 DB를 분산
MySQL : 단일 DB로 제한, 대용량 DB에는 부적합. 작은 프로젝트에서 적용하기 용이, 이전 상태 복원은 commit/rollback만 존재",TRUE
29,28,Database,MySQL,"MySQL에서도 대규모 트래픽을 처리하기 위한 방법이 전혀 없는 것은 아닌데, 어떤 방안들이 있을까요?","Replication(Master-Slave 구조)로 읽기/쓰기를 분산
샤딩(Sharding) 기법을 통해 데이터를 분산 저장
InnoDB 엔진을 활용한 트랜잭션 처리, 적절한 인덱스 설계 등을 통해 성능을 개선할 수 있습니다.",FALSE
30,29,Database,Oracle,오라클이 제공하는 고급 기능 중 MySQL과 차별화되는 예시가 있을까요?,"RAC(Real Application Clusters): 여러 서버가 하나의 DB를 공유해 고가용성과 확장성을 높임
Partitioning 기법이 매우 다양하며, 대규모 데이터에 대한 성능 최적화 기능이 풍부
Flashback Query 등 과거 시점 데이터를 조회하는 기능이 강력",FALSE
31,NULL,Database,Transaction,Commit과 Rollback이란?,"Commit: 트랜잭션이 성공적으로 끝났을 때 변경 내용을 확정
Rollback: 트랜잭션이 비정상 종료 시 모든 연산을 취소",TRUE
32,31,Database,Transaction,트랜잭션에서 SAVEPOINT는 어떤 역할을 하나요?,"트랜잭션 내에서 중간 지점을 설정하여, 부분적인 롤백이 가능하도록 해줍니다.
예를 들어, SAVEPOINT를 찍은 후 일부 작업이 실패하면 그 시점까지만 롤백하고 이전 작업 결과는 유지할 수 있습니다.",FALSE
33,32,Database,Transaction,트랜잭션이 자동으로 커밋(autocommit)되는 상황은 어떤 경우에 발생하나요?,"DBMS 설정이나 특정 툴(예: MySQL 기본 설정 등)에서 autocommit이 활성화되어 있는 경우
DDL 문장(예: CREATE, ALTER, DROP)을 실행하면 일반적으로 자동으로 커밋 처리가 일어납니다.",FALSE
34,NULL,Database,JDBC,JDBC와 ODBC의 차이는?,"JDBC : 자바 환경에서 DB 접근
ODBC : MS사에서 만든 표준 개방형 인터페이스, Excel/Text 등 다양한 데이터 소스에 접근 가능",TRUE
35,34,Database,JDBC,JDBC 드라이버 종류에는 어떤 것들이 있나요? (Type 구분),"Type 1: JDBC-ODBC 브리지 방식 (구형, 잘 사용 안 함)
Type 2: DB 클라이언트 라이브러리를 이용하는 네이티브 방식
Type 3: 미들웨어 서버를 통해 DB에 접속하는 방식
Type 4: Pure Java 드라이버(네이티브 프로토콜 직접 구현)",FALSE
36,35,Database,JDBC,"ODBC를 사용하면 Excel 파일이나 텍스트 파일에 접근하는 것도 가능한데, 어떤 시나리오에서 유용할까요?","대규모 DB가 아닌, 간단한 데이터 분석이나 리포트 생성에 Excel 데이터를 직접 읽어야 할 때
임시로 텍스트 파일(CSV 등)을 읽어서 다른 DB로 마이그레이션할 때
전문적인 DBMS 없이도 가벼운 형태로 데이터를 공유·관리해야 할 때 유용합니다.",FALSE
37,NULL,Database,Index,데이터베이스에서 인덱스(색인)이란 무엇인가요?,책으로 비유하자면 목차로 비유할 수 있다. DBMS에서 저장 성능을 희생하여 데이터 읽기 속도를 높이는 기능,TRUE
38,37,Database,Index,인덱스를 잘못 사용하면 오히려 성능이 떨어지는 경우는 언제인가요?,"잦은 INSERT/UPDATE/DELETE가 발생하는 컬럼에 인덱스를 걸면, 인덱스도 함께 갱신되어야 하므로 쓰기 성능이 저하됩니다.
카디널리티(중복도)가 낮은 컬럼(예: 성별 등)에 인덱스를 만들면 인덱스가 무의미해져, 오히려 오버헤드가 커질 수 있습니다.",FALSE
39,38,Database,Index,인덱스를 구성하는 자료구조로 B-Tree 외에 어떤 것이 사용될 수 있나요?,"Hash 인덱스: 동등 비교(=) 연산에 빠른 검색 성능을 제공
Bitmap 인덱스: 카디널리티가 매우 낮은(중복이 높은) 컬럼에 효율적
R-Tree: 공간(좌표) 데이터를 인덱싱할 때 사용",FALSE
40,NULL,Network,HTTP&HTTPS,HTTP와 HTTPS의 차이는?,"SSL(Secure Socket Layer)을 쓰냐 안쓰냐의 차이입니다.
HTTPS는 인터넷 상에서 정보를 암호화하기 위해 SSL 프로토콜을 이용해 데이터를 전송하고 있다는 것을 말합니다. 즉, 문서 전송시 암호화 처리 유무에 따라 HTTP와 HTTPS로 나누어지는 것이라고 할 수 있습니다.",TRUE
41,40,Network,SSL&TLS,SSL과 TLS의 차이는 무엇인가요?,"SSL(Secure Socket Layer)은 구버전의 암호화 프로토콜, TLS(Transport Layer Security)는 SSL을 개선한 최신 버전의 암호화 프로토콜입니다.",FALSE
42,41,Network,HTTPS,모든 사이트가 HTTPS로 하지 않는 이유는?,암호화 과정으로 인한 속도 저하가 발생하기 때문입니다.,FALSE
43,42,Network,HTTPS,"HTTPS가 속도를 저하시킨다고 했는데, 이를 보완할 방법이 있나요?","HTTP/2 또는 HTTP/3를 사용할 수 있습니다. 이들은 멀티플렉싱, 헤더 압축 등 기술을 통해 성능을 개선하고, 특히 TLS 연결을 최적화하여 HTTPS의 속도 저하를 최소화합니다. 
또한 리소스 압축이나 CDN(Content Delivery Network) 사용도 성능을 개선하는 데 도움이 됩니다.",FALSE
44,NULL,Network,HTTP Request Methods,GET과 POST의 차이는?,"GET 방식은, URL을 통해 모든 파라미터를 전달하기 때문에 주소창에 전달 값이 노출됩니다. 
URL 길이가 제한이 있기 때문에 전송 데이터 양이 한정되어 있고, 형식에 맞지 않으면 인코딩해서 전달해야 합니다.
POST 방식은 HTTP BODY에 데이터를 포함해서 전달하며, 웹 브라우저 사용자의 눈에는 직접적으로 파라미터가 노출되지 않고 길이 제한도 없습니다.",TRUE
45,44,Network,HTTP Request Methods,"GET 요청의 URL 길이 제한이 있다고 했는데, 그 이유는 무엇인가요?","일반적으로 URL의 길이가 너무 길어지면 성능 저하나 요청 실패를 초래할 수 있기 때문에, 대부분의 웹 서버는 URL 길이에 제한을 둡니다.",FALSE
46,45,Network,HTTP Request Methods,GET과 POST 중 어느 것이 더 효율적이라고 생각하시나요?,"GET은 작은 데이터 요청과 캐시가 필요한 경우, POST는 큰 데이터나 민감한 정보를 처리할 때 효율적입니다.",FALSE
47,46,Network,URL,"URL에서 민감한 정보를 포함하는 것이 보통 위험하다고 하는데, 그럼 어디에 정보를 두는 것이 맞을까요?",민감한 정보를 URL에 담는 것은 해커에게 공격의 기회를 줄 수 있기에 URL 대신 HTTP 요청 본문(body)이나 헤더에 포함하는 것이 더 안전합니다.,FALSE
48,NULL,Network,IOCP,IOCP를 사용하는 목적은 무엇인가요?,"IOCP는 어떤 I/O 핸들에 대해, 블록 되지 않게 비동기 작업을 하면서 프로그램 대기시간을 줄이는 목적으로 사용됩니다. 
동기화 Object 세마포어의 특성과, 큐를 가진 커널 Object입니다. 
대부분 멀티 스레드 상에서 사용되고, 큐는 자체적으로 운영하는 특징 때문에 스레드 풀링에 적합합니다.",TRUE
49,48,Network,스레드 풀링,방금 말씀하신 스레드 풀링은 무엇인가요?,"여러 스레드를 생성하여 대기시키고, 필요할 때 가져다가 사용한 뒤에 다시 반납하는 과정을 말합니다. 스레드의 생성과 파괴는 상당히 큰 오버헤드가 존재하기 때문에 이 과정을 이용합니다.",FALSE
50,49,Network,IOCP,IOCP를 사용할 때 주의해야 할 점은 무엇인가요?,"IOCP를 사용할 때는 스레드 수 관리, 리소스 관리, 동기화 문제, 오류 처리 및 네트워크 성능 최적화에 주의해야 합니다.",FALSE
51,50,Network,IOCP,IOCP의 장점은 뭐가 있을까요?,"IOCP의 장점은 사용자가 설정한 버퍼만 사용하기 때문에 더 효율적으로 작동시킬 수 있습니다. 기존에는 OS버퍼, 사용자 버퍼로 따로 분리해서 운영했습니다.",FALSE
52,NULL,Network,라우터&스위치,라우터와 스위치의 차이는?,"라우터는 3계층 장비로, 수신한 패킷의 정보를 보고 경로를 설정해 패킷을 전송하는 역할을 수행하는 장비이고,
스위치는 주로 내부 네트워크에 위치하며 MAC 주소 테이블을 이용해 해당 프레임을 전송하는 2계층 장비를 말합니다.",TRUE
53,52,Network,패킷,패킷이 무엇인가요?,"패킷은 네트워크에서 데이터를 전송할 때, 데이터를 일정 크기의 작은 단위로 나누어 전송하는 방법입니다. 
각 패킷은 목적지 주소, 출발지 주소, 데이터와 같은 정보를 포함하고 있어, 네트워크를 통해 효율적으로 전송될 수 있습니다.",FALSE
54,53,Network,MAC주소,MAC 주소가 무엇인가요?,"MAC 주소는 Media Access Control의 약자이며, 이 주소는 네트워크에서 장치를 식별하는 데 사용되며, 주로 이더넷 네트워크에서 데이터를 전송할 때 사용됩니다.",FALSE
55,54,Network,프레임,프레임이 무엇인가요?,"프레임은 데이터 링크 계층에서 전송되는 데이터 단위입니다. 
프레임은 네트워크 상에서 데이터를 전송할 때, 그 데이터와 함께 추가적인 헤더 정보를 포함하고 있으며, 이를 통해 수신자는 데이터가 어떤 목적지로 가야하는지, 그리고 다른 제어 정보 등을 알 수 있습니다.",FALSE
56,NULL,Network,OSI 7계층,OSI 7계층 중 데이터링크 계층에 대해 설명해주세요.,"데이터링크 계층은 OSI 7계층 중 두 번째 계층으로, 물리 계층에서 전달된 원시 비트들을 프레임이라고 하는 데이터 단위로 묶어서 전송하는 역할을 합니다.
이 계층은 네트워크의 신뢰성을 확보하고, 오류를 감지하거나 수정하는 기능도 수행합니다.",TRUE
57,56,Network,OSI 7계층,OSI 7계층 중 네트워크 계층에 대해 설명해주세요.,"네트워크 계층은 OSI 7계층 중 세 번째 계층으로, 데이터를 송수신하는 장치들 간의 경로 설정 및 데이터 패킷의 전달을 담당합니다. 
이 계층의 주요 목적은 패킷을 목적지까지 효율적으로 전달하는 것입니다.",FALSE
58,57,Network,네트워크 계층,OSI 7계층 중 네트워크 계층에 주요 프로토콜이 무엇이 있나요?,"네트워크 계층의 대표적인 프로토콜은 IP, ICMP, ARP입니다. 
IP는 데이터가 네트워크를 통해 전달될 수 있도록 주소 지정 및 경로 설정을 담당하고, ICMP는 네트워크 장비 간 오류 메시지를 전달하거나 네트워크 상태를 확인하는 데 사용됩니다. 그리고 ARP는 IP 주소를 물리적 MAC 주소로 변환하여 네트워크 장치 간의 통신을 가능하게 합니다.",FALSE
59,58,Network,OSI 7계층,OSI 7계층 중 어느 계층이 가장 중요한가요?,"OSI 7계층에서 어느 계층이 가장 중요한지 정의하기는 어렵지만, 네트워크 계층과 전송 계층이 중요한 역할을 합니다. 
네트워크 계층은 데이터의 경로를 결정하고, 전송 계층은 신뢰성 있는 데이터 전송을 보장하기 때문입니다.",FALSE
60,NULL,OperatingSystem,프로세스와 스레드,프로세스와 스레드 차이점은 무엇인가요?,"프로세스는 자신만의 고유 공간과 자원을 할당받아 사용하고
스레드는 다른 스레드와 공간과 자원을 공유하면서 사용합니다.",TRUE
61,60,OperatingSystem,프로세스와 스레드,스레드끼리 stack만 따로 할당받는 이유는 무엇인가요?,"Stack은 함수 호출 시 지역 변수와 함수의 실행 흐름(콜 스택)을 관리하는 공간이기 때문에, 각 스레드가 독립적으로 실행되려면 개별적인 스택이 필요합니다.",FALSE
62,61,OperatingSystem,프로세스와 스레드,"그럼, 힙(Heap)은 왜 스레드끼리 공유하나요?","힙은 동적으로 할당되는 메모리 공간으로, 모든 스레드가 같은 힙 공간을 사용해 메모리를 할당받습니다. 이는 스레드들이 서로 메모리 자원을 공유할 수 있게 해주고, 필요한 데이터를 동적으로 할당하고 해제하는 데 유용합니다.",FALSE
63,NULL,OperatingSystem,가상 메모리,가상 메모리란 무엇인가요?,"가상 메모리는 프로세스가 사용하는 논리적 메모리 주소와 실제 물리적 메모리 주소를 분리하는 기법.
실제 메모리가 부족할 때, 사용하지 않는 데이터를 디스크(보조 기억장치)에 저장해 두었다가 필요할 때 다시 불러오는 방식.",TRUE
64,63,OperatingSystem,가상 메모리,가상 메모리를 사용하면 속도는 어떻게 되나요?,"가상 메모리는 RAM보다 속도가 느린 디스크를 사용하기 때문에, 메모리 부족 시 디스크에서 데이터를 가져오는 과정(페이지 폴트)이 발생하면 성능이 저하될 수 있습니다.",FALSE
65,64,OperatingSystem,가상 메모리,그럼 페이지 폴트를 줄이려면 어떻게 해야 하나요?,"1. 메모리를 충분히 확보 (RAM 추가)
2. 캐시 적중률을 높이는 알고리즘 사용 (LRU, FIFO 같은 페이지 교체 알고리즘)
3. 적절한 프로세스 관리 (불필요한 프로세스 종료)",FALSE
66,NULL,OperatingSystem,페이징과 세그먼테이션,페이징과 세그먼테이션 중 어느 것이 더 효율적인가요?,"페이징은 고정 크기 블록이라 외부 단편화가 없고 메모리 관리가 단순하지만, 내부 단편화가 발생할 수 있음.
세그먼테이션은 프로그램 구조에 맞게 메모리를 효율적으로 사용할 수 있지만, 외부 단편화 문제가 생길 수 있음. 즉, 상황에 따라 다르다.",TRUE
67,66,OperatingSystem,페이징과 세그먼테이션,그럼 페이징과 세그먼테이션을 같이 사용할 수도 있나요?,세그먼트 단위를 다시 페이지로 나누는 ‘세그먼테이션 페이징(Segmentation with Paging)’ 기법을 사용하면 됩니다.,FALSE
68,NULL,OperatingSystem,단편화,외부 단편화와 내부 단편화란 무엇인가요?,"
외부 단편화 : 작업보다 많은 공간이 있더라도 실제로 그 작업을 받아들일 수 없는 경우 (메모리 배치에 따라 발생하는 문제)

내부 단편화 : 작업에 필요한 공간보다 많은 공간을 할당받음으로써 발생하는 내부의 사용 불가능한 공간",TRUE
69,68,OperatingSystem,단편화,외부 단편화와 내부 단편화는 서로 영향을 미칠 수 있나요?,"외부 단편화와 내부 단편화는 서로 영향을 미칠 수 있습니다. 페이징은 외부 단편화를 해결하지만, 내부 단편화가 발생할 수 있으며, 세그먼테이션은 반대로 내부 단편화는 줄이지만 외부 단편화가 발생할 수 있습니다.",FALSE
70,69,OperatingSystem,단편화,"그렇다면, 외부 단편화와 내부 단편화를 동시에 해결하려면 어떤 방법을 사용해야 할까요?","외부 단편화와 내부 단편화를 동시에 해결하려면, 세그먼테이션 페이징 기법을 사용할 수 있습니다. 이 방식은 세그먼트 단위로 메모리를 관리하고, 각 세그먼트를 페이징 기법을 통해 처리하여 두 가지 문제를 동시에 해결하려고 시도하는 방법입니다.",FALSE
71,NULL,OperatingSystem,교착상태,"교착상태(DeadLock)가 무엇이며, 4가지 조건은?","프로세스가 자원을 얻지 못해 다음 처리를 하지 못하는 상태를 말한다.

1. 상호배제 : 프로세스들이 필요로 하는 자원에 대해 배타적 통제권을 요구함
2. 점유대기 : 프로세스가 할당된 자원을 가진 상태에서 다른 자원 기다림
3. 비선점 : 프로세스가 어떤 자원의 사용을 끝날 때까지 그 자원을 뺏을 수 없음
4. 순환대기 : 각 프로세스는 순환적으로 다음 프로세스가 요구하는 자원을 갖고 있음",TRUE
72,71,OperatingSystem,교착상태,교착상태를 예방하려면 어떤 조건을 제거해야 할까요?,"교착상태 예방을 위해서는 교착상태 발생 조건 중 하나를 제거해야 합니다. 예를 들어, 상호배제를 제거하면 자원을 여러 프로세스가 동시에 사용할 수 있어 교착상태가 발생하지 않게 할 수 있지만, 이는 자원의 효율적인 사용을 방해할 수 있습니다. 또는 비선점을 제거하면 자원을 강제로 선점하여 교착상태를 방지할 수 있습니다.",FALSE
73,72,OperatingSystem,교착상태,상호배제를 제거하는 방법이 실제 시스템에서 어떻게 구현될 수 있나요?,"상호배제를 제거하려면 여러 프로세스가 동시에 자원을 공유할 수 있도록 해야 합니다. 예를 들어, 읽기-쓰기 잠금을 사용할 수 있습니다. 읽기 작업은 여러 프로세스가 동시에 할 수 있지만, 쓰기 작업은 단 하나의 프로세스만 할 수 있도록 보장하는 방식입니다. 이렇게 하면 자원을 동시에 여러 프로세스가 사용할 수 있으므로 상호배제가 없어진 것과 비슷한 효과를 낼 수 있습니다. 그러나 모든 자원에 대해 상호배제를 없애는 것은 현실적으로 어려울 수 있습니다.",FALSE
74,NULL,OperatingSystem,"뮤텍스, 세마포어","뮤텍스, 세마포어가 뭔지, 차이점은?","1. 세마포어는 뮤텍스가 될 수 있지만, 뮤텍스는 세마포어가 될 수 없음
2. 세마포어는 소유 불가능하지만, 뮤택스는 소유가 가능함
3. 동기화의 개수가 다름",TRUE
75,74,OperatingSystem,"뮤텍스, 세마포어","뮤텍스가 세마포어처럼 동작할 수는 없는 이유는 무엇인가요?""","뮤텍스는 하나의 스레드만 자원을 소유할 수 있기 때문에, 자원을 점유한 스레드가 이를 해제할 때까지 다른 스레드가 접근할 수 없습니다. 반면 세마포어는 소유 개념이 없고, 자원의 개수에 맞춰 여러 스레드가 자원을 동시에 접근할 수 있습니다.",FALSE
76,75,OperatingSystem,"뮤텍스, 세마포어","세마포어는 여러 스레드가 자원을 동시에 접근할 수 있다고 했는데, 그럼 세마포어는 어떻게 상호배제를 보장하나요?","세마포어는 자원의 개수를 추적하지만, 여러 스레드가 동시에 자원을 사용할 수 있어 상호배제를 보장하지 않습니다. 따라서 추가적인 동기화 기법이 필요할 수 있습니다.",FALSE
77,NULL,Spring,프론트 컨트롤러,Dispatcher-Servlet란?,"서블릿 컨테이너에서 HTTP 프로토콜을 통해 들어오는 모든 요청을 제일 앞에서 처리해주는 프론트 컨트롤러를 말함

따라서 서버가 받기 전에, 공통처리 작업을 디스패처 서블릿이 처리해주고 적절한 세부 컨트롤러로 작업을 위임해줍니다.

디스패처 서블릿이 처리하는 url 패턴을 지정해줘야 하는데, 일반적으로는 .mvc와 같은 패턴으로 처리하라고 미리 지정해줍니다.

디스패처 서블릿으로 인해 web.xml이 가진 역할이 상당히 축소되었습니다. 기존에는 모든 서블릿을 url 매핑 활용을 위해 모두 web.xml에 등록해 주었지만, 디스패처 서블릿은 그 전에 모든 요청을 핸들링해주면서 작업을 편리하게 할 수 있도록 도와줍니다. 또한 이 서블릿을 통해 MVC를 사용할 수 있기 때문에 웹 개발 시 큰 장점을 가져다 줍니다.
",TRUE
78,77,Spring,프론트 컨트롤러,Spring MVC에서 프론트 컨트롤러는 어떤 역할을 하나요?,"Spring MVC에서 프론트 컨트롤러(DispatcherServlet)는 클라이언트의 요청을 받아 적절한 핸들러로 전달하고, 그 결과를 뷰(View)로 반환하는 역할을 합니다.
 이를 통해 요청을 처리하는 모든 흐름을 중앙에서 관리하며, 요청에 맞는 컨트롤러를 찾아 실행하고, 응답을 생성하는 데 필요한 다양한 컴포넌트들과 협력합니다.",FALSE
79,78,Spring,URL 패턴,URL 패턴을 .mvc로 지정하는 이유는?,".mvc 같은 확장자를 URL 패턴으로 지정하는 이유는 컨트롤러가 처리할 요청과 정적 파일(CSS, JS, 이미지) 등을 구분하기 위해서입니다.
이렇게 하면 특정 요청만 디스패처 서블릿이 받아서 처리할 수 있고, 기존의 .jsp, .do, .action 같은 패턴과 충돌을 피할 수도 있습니다.",FALSE
80,79,Spring,URL 패턴,RESTful한 URL 구조란 무엇인가요?,"RESTful한 URL 구조는 자원의 의미를 URL에 표현하는 방식입니다. 예를 들어, /users는 사용자 목록을, /users/1은 특정 사용자 정보를 의미합니다.
HTTP 메서드(GET, POST, PUT, DELETE)와 함께 사용하여 자원에 대한 CRUD 작업을 직관적으로 수행할 수 있도록 설계됩니다.",FALSE
81,NULL,Spring,AOP,AOP란?,"공통의 관심 사항을 적용해서 발생하는 의존 관계의 복잡성과 코드 중복을 해소해줍니다.

각 클래스에서 공통 관심 사항을 구현한 모듈에 대한 의존관계를 갖기 보단, Aspect를 이용해 핵심 로직을 구현한 각 클래스에 공통 기능을 적용합니다.

간단한 설정만으로도 공통 기능을 여러 클래스에 적용할 수 있는 장점이 있으며 핵심 로직 코드를 수정하지 않고도 웹 애플리케이션의 보안, 로깅, 트랜잭션과 같은 공통 관심 사항을 AOP를 이용해 간단하게 적용할 수 있습니다.",TRUE
82,81,Spring,AOP,AOP를 적용할 때 발생할 수 있는 문제점은 무엇이 있을까요?,"AOP를 적용할 때 발생할 수 있는 문제점은 디버깅이 어려워질 수 있다는 점입니다. 핵심 로직과 공통 기능이 분리되기 때문에 문제가 발생했을 때 원인 파악이 어려울 수 있습니다.
또한, Aspect가 적용된 메서드를 호출할 때 추가적인 처리 시간이 들어 성능에 영향을 줄 수 있습니다. AOP 설정을 잘못하면 예상치 못한 동작을 유발할 수 있으므로 설정에 신경을 써야 합니다. 마지막으로, AOP를 과도하게 사용하면 코드 흐름을 파악하기 어려워지고 가독성이 떨어질 수 있습니다",FALSE
83,82,Spring,디자인패턴,AOP를 사용하지 않고 공통 관심 사항을 처리할 수 있는 다른 방법은 무엇인가요?,"디자인 패턴을 활용할 수 있습니다. 템플릿 메서드 패턴이나 데코레이터 패턴을 사용하면 공통 기능을 별도의 클래스나 메서드로 분리하여 각 클래스에서 해당 기능을 호출할 수 있습니다. 또한, 필터나 인터셉터를 사용하여 공통 관심 사항을 처리할 수 있습니다. 이러한 방식은 코드의 중복을 줄이고, 공통 기능을 별도로 관리할 수 있는 장점이 있습니다.",FALSE
84,NULL,Spring,DAO,DAO이란?,"DB에 데이터를 조회하거나 조작하는 기능들을 전담합니다.

Mybatis를 이용할 때는, mapper.xml에 쿼리문을 작성하고 이를 mapper 클래스에서 받아와 DAO에게 넘겨주는 식으로 구현합니다.",TRUE
85,84,Spring,DAO,DAO 패턴을 사용하는 이유는 무엇인가요?,"DAO(Data Access Object) 패턴을 사용하는 이유는 데이터베이스와 애플리케이션 간의 의존성을 줄이고, 데이터 접근 로직을 분리하여 유지보수성을 높이기 위해서입니다. DAO 패턴을 사용하면 데이터베이스와의 상호작용을 하나의 객체로 캡슐화하여 코드의 재사용성을 높이고, 다양한 데이터 소스(예: MySQL, Oracle 등)와의 변경을 애플리케이션 로직에 영향을 주지 않도록 할 수 있습니다. 또한, 테스트가 용이해지고, 데이터 처리 로직을 변경할 때 애플리케이션의 다른 부분에 미치는 영향을 최소화할 수 있습니다.",FALSE
86,85,Spring,DAO,DAO 패턴을 사용하면 코드의 재사용성이 어떻게 높아지나요?,"DAO 패턴을 사용하면 데이터베이스 접근 로직을 하나의 객체로 캡슐화하여, 동일한 데이터 처리 로직을 여러 곳에서 재사용할 수 있게 됩니다.
이를 통해 각 데이터베이스 작업을 분리된 메서드로 관리할 수 있어, 코드의 중복을 줄이고 유지보수를 쉽게 합니다. 또한, 데이터베이스 변경 시 DAO만 수정하면 되므로 애플리케이션의 다른 부분에 영향을 주지 않습니다.",FALSE
87,NULL,Spring,어노테이션,Annotation이란?,"소스코드에 @어노테이션의 형태로 표현하며 클래스, 필드, 메소드의 선언부에 적용할 수 있는 특정기능이 부여된 표현법을 말합니다.

애플리케이션 규모가 커질수록, xml 환경설정이 매우 복잡해지는데 이러한 어려움을 개선시키기 위해 자바 파일에 어노테이션을 적용해서 개발자가 설정 파일 작업을 할 때 발생시키는 오류를 최소화해주는 역할을 합니다.

어노테이션 사용으로 소스 코드에 메타데이터를 보관할 수 있고, 컴파일 타임의 체크뿐 아니라 어노테이션 API를 사용해 코드 가독성도 높여줍니다.",TRUE
88,87,Spring,어노테이션,자주 사용되는 표준 어노테이션에는 어떤 것들이 있나요?,"@Component: 클래스를 Spring의 컴포넌트로 정의하여 Spring 컨테이너가 관리하도록 합니다.
@Autowired: 의존성 주입을 자동으로 수행합니다. Spring이 자동으로 빈을 주입해 줍니다.
@Service: 비즈니스 로직을 처리하는 서비스 클래스를 나타내는 어노테이션으로, @Component의 특성을 가지며 서비스 레이어에서 사용됩니다.
@Repository: 데이터 접근을 처리하는 DAO 클래스를 나타내는 어노테이션으로, @Component의 특성을 가지며 데이터베이스와의 상호작용을 담당합니다.
@Controller: Spring MVC에서 요청을 처리하는 컨트롤러 클래스를 정의하는 어노테이션입니다.
@RestController: @Controller와 @ResponseBody를 결합한 어노테이션으로, RESTful 웹 서비스에서 JSON 형식으로 응답을 반환합니다.
@RequestMapping: HTTP 요청을 메서드에 매핑하는 어노테이션으로, GET, POST, PUT 등 다양한 HTTP 메서드를 지정할 수 있습니다.",FALSE
89,88,Spring,어노테이션,@RestController와 @Controller의 차이점은 무엇인가요?,"@Controller는 주로 HTML 페이지를 반환하는데 사용되며, 서버 사이드 렌더링을 지원합니다. 
반면, @RestController는 JSON이나 XML 형식의 데이터를 반환하는 RESTful 웹 서비스에서 사용됩니다. @RestController는 @Controller와 @ResponseBody를 결합한 형태로, 반환된 데이터가 자동으로 HTTP 응답 본문에 포함됩니다.",FALSE
90,NULL,Spring,JDBC,Spring JDBC란?,"데이터베이스 테이블과, 자바 객체 사이의 단순한 매핑을 간단한 설정을 통해 처리하는 것

기존의 JDBC에서는 구현하고 싶은 로직마다 필요한 SQL문이 모두 달랐고, 이에 필요한 Connection, PrepareStatement, ResultSet 등을 생성하고 Exception 처리도 모두 해야하는 번거러움이 존재했습니다.

Spring에서는 JDBC와 ORM 프레임워크를 직접 지원하기 때문에 따로 작성하지 않아도 모두 다 처리해주는 장점이 있습니다.",TRUE
91,90,Spring,자동 처리,Spring에서 자동으로 처리해주는 기능에 대해 더 자세히 설명해 주세요.,"Spring은 데이터베이스 연결 관리, 트랜잭션 처리, 예외 처리 등을 자동으로 처리해줍니다.
 예를 들어, @Transactional 어노테이션을 사용하면 트랜잭션의 시작과 종료를 자동으로 관리해주고, JDBC 템플릿을 사용하면 SQL 쿼리 실행과 예외 처리를 자동으로 해줍니다. 또한, Spring은 ORM 프레임워크와 통합되어 객체와 데이터베이스 간의 매핑을 자동으로 처리하며, IoC 컨테이너를 통해 의존성 주입도 자동으로 해줍니다. 이를 통해 개발자는 반복적인 작업을 줄이고, 코드의 가독성과 유지보수성을 높일 수 있습니다.",FALSE
92,91,Spring,자동 처리,@Transactional 어노테이션은 어떻게 작동하나요?,"@Transactional 어노테이션은 트랜잭션의 시작과 종료를 자동으로 관리합니다.
해당 어노테이션이 붙은 메서드가 실행되면, Spring은 트랜잭션을 시작하고 메서드가 정상적으로 끝나면 커밋을, 예외가 발생하면 롤백을 수행합니다. 트랜잭션 범위 내에서 데이터베이스 작업이 안전하게 처리되도록 보장해 줍니다.",FALSE